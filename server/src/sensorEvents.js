/*
 * sensorEvents.js
 *
 * Handles all types of events generated by sensors via particle webhooks at /api/sensorEvent
 */

// Third-party dependencies
const Validator = require('express-validator')

// In-house dependencies
const { helpers, twilioHelpers } = require('./utils/index')
const { EVENT_TYPE, SESSION_STATUS } = require('./enums/index')
const db_new = require('./db/db_new')

const particleWebhookAPIKey = helpers.getEnvVar('PARTICLE_WEBHOOK_API_KEY')
const STILLNESS_ALERT_REMINDER = helpers.getEnvVar('STILLNESS_ALERT_REMINDER')

// ----------------------------------------------------------------------------------------------------------------------------

async function scheduleStillnessAlerts(client, device, sessionId) {
  const reminderTimeout = STILLNESS_ALERT_REMINDER * 60 * 1000

  async function handleStillnessReminder(reminderNumber) {
    try {
      const reminderType = {
        1: 'First',
        2: 'Second',
        3: 'Third',
      }[reminderNumber]

      const messageKey = `stillnessAlert${reminderType}Reminder`
      const textMessage = helpers.translateMessageKeyToMessage(messageKey, { client, device })
      await db_new.createEvent(sessionId, EVENT_TYPE.STILLNESS_ALERT, messageKey, client.responderPhoneNumbers)
      await twilioHelpers.sendMessageToPhoneNumbers(device.deviceTwilioNumber, client.responderPhoneNumbers, textMessage)
    } catch (error) {
      helpers.logError(`Error in stillness reminder ${reminderNumber}: ${error.message}`)
    }
  }

  async function handleStillnessFallback() {
    try {
      const messageKey = 'stillnessAlertFallback'
      const textMessage = helpers.translateMessageKeyToMessage(messageKey, { client, device })
      await db_new.createEvent(sessionId, EVENT_TYPE.STILLNESS_ALERT, messageKey, client.fallbackPhoneNumbers)
      await twilioHelpers.sendMessageToPhoneNumbers(device.deviceTwilioNumber, client.fallbackPhoneNumbers, textMessage)
    } catch (error) {
      helpers.logError(`Error in fallback alert: ${error.message}`)
    }
  }

  const alertSequence = [
    {
      handler: () => handleStillnessReminder(1),
      delay: reminderTimeout,
    },
    {
      handler: async () => {
        // Send both second reminder and fallback simultaneously
        await Promise.all([handleStillnessReminder(2), handleStillnessFallback()])
      },
      delay: reminderTimeout * 2,
    },
    {
      handler: () => handleStillnessReminder(3),
      delay: reminderTimeout * 3,
    },
  ]

  for (const alert of alertSequence) {
    setTimeout(async () => {
      try {
        const currentSession = await db_new.getLatestSessionWithDeviceId(device.deviceId)
        if (
          currentSession &&
          currentSession.sessionId === sessionId &&
          currentSession.sessionStatus === SESSION_STATUS.ACTIVE &&
          !currentSession.doorOpened &&
          (!currentSession.attendingResponderNumber ||
            (currentSession.attendingResponderNumber && currentSession.selectedSurveyCategory === 'Occupant Okay'))
        ) {
          await alert.handler()
        }
      } catch (error) {
        helpers.logError(`scheduleStillnessAlerts: ${error.message}`)
      }
    }, alert.delay)
  }
}

// ----------------------------------------------------------------------------------------------------------------------------

function selectMessageKeyForNewSession(eventType) {
  switch (eventType) {
    case EVENT_TYPE.DURATION_ALERT:
      return 'durationAlert'
    case EVENT_TYPE.STILLNESS_ALERT:
      return 'stillnessAlert'
    case EVENT_TYPE.DOOR_OPENED:
      helpers.log('Received door opened as the first alert ... ignoring alert.')
      return null // ignore the alert
    default: {
      throw new Error(`selectMessageKeyForNewSession: Invalid event type received as the first alert: ${eventType}`)
    }
  }
}

async function selectMessageKeyForExistingSession(eventType, currentSession, pgClient) {
  try {
    switch (eventType) {
      case EVENT_TYPE.DURATION_ALERT:
        return 'durationAlert'
      case EVENT_TYPE.STILLNESS_ALERT:
        return 'stillnessAlert'
      case EVENT_TYPE.DOOR_OPENED: {
        const latestAlertEvent = await db_new.getLatestAlertEvent(currentSession.sessionId, pgClient)
        if (!latestAlertEvent) {
          throw new Error(`No latest alert event found for session ID: ${currentSession.sessionId}`)
        }

        switch (latestAlertEvent.eventType) {
          case EVENT_TYPE.DURATION_ALERT:
            return 'durationAlertSurveyPromptDoorOpened'
          case EVENT_TYPE.STILLNESS_ALERT:
            return 'stillnessAlertSurveyDoorOpened'
          default: {
            throw new Error(`Invalid latest alert event type: ${latestAlertEvent.eventType}`)
          }
        }
      }
      default: {
        throw new Error(`Invalid event type: ${eventType}`)
      }
    }
  } catch (error) {
    throw new Error(`selectMessageKeyForExistingSession: ${error.message}`)
  }
}

// ----------------------------------------------------------------------------------------------------------------------------

async function handleNewSession(client, device, eventType, eventData, pgClient) {
  try {
    const messageKey = selectMessageKeyForNewSession(eventType)
    if (!messageKey) return

    // create a new active session
    const newSession = await db_new.createSession(device.deviceId, pgClient)
    if (!newSession) {
      throw new Error(`Failed to create a new session`)
    }

    // prepare message
    const textMessage = helpers.translateMessageKeyToMessage(messageKey, {
      client,
      device,
      params: { occupancyDuration: eventData.occupancyDuration },
    })

    // log the event and send the message
    await db_new.createEvent(newSession.sessionId, eventType, messageKey, client.responderPhoneNumbers, pgClient)
    await twilioHelpers.sendMessageToPhoneNumbers(device.deviceTwilioNumber, client.responderPhoneNumbers, textMessage)

    // schedule alerts only after everything else succeeds
    if (eventType === EVENT_TYPE.STILLNESS_ALERT) {
      scheduleStillnessAlerts(client, device, newSession.sessionId)
    }
  } catch (error) {
    throw new Error(`handleNewSession: Error handling new session for device ID: ${device.deviceId} - ${error.message}`)
  }
}

async function handleExistingSession(client, device, eventType, eventData, currentSession, pgClient) {
  try {
    const messageKey = await selectMessageKeyForExistingSession(eventType, currentSession, pgClient)

    // Update session first if it's a door opened event
    if (eventType === EVENT_TYPE.DOOR_OPENED) {
      const sessionUpdates = {
        doorOpened: true,
        surveySent: messageKey === 'stillnessAlertSurveyDoorOpened' ? true : currentSession.surveySent,
      }

      // Update database with new state
      await db_new.updateSession(
        currentSession.sessionId,
        currentSession.sessionStatus,
        sessionUpdates.doorOpened,
        sessionUpdates.surveySent,
        pgClient,
      )

      // Apply updates to current session
      Object.assign(currentSession, sessionUpdates)
    }

    // prepare message
    const textMessage = helpers.translateMessageKeyToMessage(messageKey, {
      client,
      device,
      params: { occupancyDuration: eventData.occupancyDuration },
    })

    // If survey was sent and selected category is 'Occupant Okay', send the message to only the attending responder
    // otherwise send message to all the responders
    if (currentSession.attendingResponderNumber && currentSession.surveySent && currentSession.selectedSurveyCategory === 'Occupant Okay') {
      await db_new.createEvent(currentSession.sessionId, EVENT_TYPE.MSG_SENT, messageKey, currentSession.attendingResponderNumber, pgClient)
      await twilioHelpers.sendMessageToPhoneNumbers(device.deviceTwilioNumber, currentSession.attendingResponderNumber, textMessage)
    } else {
      await db_new.createEvent(currentSession.sessionId, eventType, messageKey, client.responderPhoneNumbers, pgClient)
      await twilioHelpers.sendMessageToPhoneNumbers(device.deviceTwilioNumber, client.responderPhoneNumbers, textMessage)
    }

    // schedule the stillness alerts (these don't use the current transaction)
    if (eventType === EVENT_TYPE.STILLNESS_ALERT) {
      scheduleStillnessAlerts(client, device, currentSession.sessionId)
    }
  } catch (error) {
    throw new Error(`handleExistingSession: Error handling existing session with session ID ${currentSession.sessionId}: ${error.message}`)
  }
}

async function processSensorEvent(client, device, eventType, eventData) {
  let pgClient

  try {
    pgClient = await db_new.beginTransaction()
    if (!pgClient) {
      throw new Error('Error starting transaction')
    }

    // A sensor cannot send more than one stillnessAlert
    if (eventData.numStillnessAlertsSent > 1) {
      throw new Error(`More than one stillness alert received for device: ${device.deviceId}`)
    }

    const currentSession = await db_new.getLatestSessionWithDeviceId(device.deviceId, pgClient)
    if (!currentSession) {
      await handleNewSession(client, device, eventType, eventData, pgClient)
    }
    // Case 1: Alert received for active session after door was opened (new occupant)
    else if (currentSession.sessionStatus === SESSION_STATUS.ACTIVE && currentSession.doorOpened) {
      helpers.log('Received sensor event for session with opened door, creating new session')

      // Mark current session as stale since door was opened
      await db_new.updateSession(currentSession.sessionId, SESSION_STATUS.STALE, currentSession.doorOpened, currentSession.surveySent, pgClient)

      // Create new session for new occupant
      await handleNewSession(client, device, eventType, eventData, pgClient)
    }
    // Case 2: Alert received for completed session
    else if (currentSession.sessionStatus === SESSION_STATUS.COMPLETED && currentSession.doorOpened) {
      helpers.log('Received sensor event for completed session, creating new session')
      await handleNewSession(client, device, eventType, eventData, pgClient)
    } else {
      await handleExistingSession(client, device, eventType, eventData, currentSession, pgClient)
    }

    await db_new.commitTransaction(pgClient)
  } catch (error) {
    if (pgClient) {
      try {
        await db_new.rollbackTransaction(pgClient)
      } catch (rollbackError) {
        throw new Error(`Error rolling back transaction: ${rollbackError}. Rollback attempted because of error: ${error}`)
      }
    }
    throw new Error(`processSensorEvent: ${error.message}`)
  }
}

// ----------------------------------------------------------------------------------------------------------------------------
// Sensor Events (/api/sensorEvent)

const validateSensorEvent = [
  Validator.body('event')
    .exists()
    .isString()
    .custom(value => {
      const validEvents = ['Duration Alert', 'Stillness Alert', 'Door Opened']
      return validEvents.includes(value)
    }),
  Validator.body('data').exists().isString(),
  Validator.body('coreid').exists().isString(),
  Validator.body('api_key').exists().isString(),
]

function parseSensorEventType(receivedEventType) {
  const eventTypeMapping = {
    'Duration Alert': EVENT_TYPE.DURATION_ALERT,
    'Stillness Alert': EVENT_TYPE.STILLNESS_ALERT,
    'Door Opened': EVENT_TYPE.DOOR_OPENED,
  }
  const eventType = eventTypeMapping[receivedEventType]
  if (!eventType) throw new Error(`Unknown event type: ${receivedEventType}`)
  return eventType
}

function parseSensorEventData(receivedEventData) {
  const eventData = typeof receivedEventData === 'string' ? JSON.parse(receivedEventData) : receivedEventData
  if (!eventData) throw new Error('Error parsing event data')

  const requiredFields = {
    alertSentFromState: 'number',
    numDurationAlertsSent: 'number',
    numStillnessAlertsSent: 'number',
    occupancyDuration: 'number',
  }

  for (const [field] of Object.entries(requiredFields)) {
    if (!(field in eventData)) {
      throw new Error(`Missing required field: ${field}`)
    }
    if (typeof eventData[field] !== 'number') {
      throw new Error(`Invalid type for ${field}: expected number, got ${typeof eventData[field]}`)
    }
  }

  return eventData
}

async function handleSensorEvent(request, response) {
  try {
    const validationErrors = Validator.validationResult(request).formatWith(helpers.formatExpressValidationErrors)
    if (!validationErrors.isEmpty()) {
      throw new Error(`Bad request: ${validationErrors.array()}`)
    }

    const { api_key, event: receivedEventType, data: receivedEventData, coreid: particleDeviceID } = request.body
    if (api_key !== particleWebhookAPIKey) throw new Error('Access not allowed: Invalid API key')

    const eventType = parseSensorEventType(receivedEventType)
    const eventData = parseSensorEventData(receivedEventData)

    const device = await db_new.getDeviceWithParticleDeviceId(particleDeviceID)
    if (!device) throw new Error(`No device matches the coreID: ${particleDeviceID}`)

    const client = await db_new.getClientWithClientId(device.clientId)
    if (!client) throw new Error(`No client found for device: ${device.deviceId}`)

    if (client.devicesSendingAlerts && device.isSendingAlerts) {
      await processSensorEvent(client, device, eventType, eventData)
    }

    response.status(200).json('OK')
  } catch (error) {
    helpers.logError(`Error on ${request.path}: ${error.message}`)
    // Must send 200 so as not to be throttled by Particle
    response.status(200).json(error.message)
  }
}

// ----------------------------------------------------------------------------------------------------------------------------

module.exports = {
  validateSensorEvent,
  handleSensorEvent,
}
