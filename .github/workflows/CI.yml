name: CI

on:
  push:
    branches: ['*']
    
jobs:
  server:
    name: Server
    runs-on: ubuntu-latest

    env:
      # Test environment variables
      WEB_USERNAME_TEST: myusername
      PASSWORD_TEST: 1234
      SECRET_TEST: secret

      PG_USER: myuser
      PG_DATABASE: mydb
      PG_PASSWORD: 1234
      PG_HOST: localhost
      PG_PORT: 5432

      PG_USER_TEST: myuser
      PG_DATABASE_TEST: mydb
      PG_PASSWORD_TEST: 1234
      PG_HOST_TEST: localhost
      PG_PORT_TEST: 5432
      IS_DB_LOGGING_TEST: false

      SENTRY_DSN_TEST: localhost

      TWILIO_SID_TEST: ${{ secrets.TWILIO_SID_TEST }}
      TWILIO_TOKEN_TEST: ${{ secrets.TWILIO_TOKEN_TEST }}
      TWILIO_MESSAGING_SERVICE_SID_TEST: ${{ secrets.TWILIO_MESSAGING_SERVICE_SID_TEST }}

      PARTICLE_ACCESS_TOKEN_TEST: ${{ secrets.PARTICLE_ACCESS_TOKEN_TEST }}
      PARTICLE_PRODUCT_GROUP_TEST: ${{ secrets.PARTICLE_PRODUCT_GROUP_TEST }}
      PARTICLE_WEBHOOK_API_KEY_TEST: ${{ secrets.PARTICLE_WEBHOOK_API_KEY_TEST }}

      PA_API_KEY_PRIMARY_TEST: 1234
      PA_API_KEY_SECONDARY_TEST: 1234
      PA_PASSWORD_PRIMARY_TEST: ${{ secrets.PA_PASSWORD_PRIMARY_TEST }}
      PA_PASSWORD_SECONDARY_TEST: ${{ secrets.PA_PASSWORD_SECONDARY_TEST }}
      PA_CLIENT_ID_TEST: abc123
      PA_CLIENT_SECRET_TEST: abc123

      DOMAIN_TEST: domain.brave.coop

      CHECK_DEVICE_CONNECTION_VITALS_THRESHOLD_TEST: 30000
      STILLNESS_ALERT_SURVEY_FOLLOWUP_TEST: 0.5
      LOW_BATTERY_ALERT_TIMEOUT_TEST: 30
      CONSECUTIVE_OPEN_DOOR_HEARTBEAT_THRESHOLD_TEST: 3
      CONSECUTIVE_OPEN_DOOR_FOLLOW_UP_TEST: 1
      DEVICE_DISCONNECTION_THRESHOLD_SECONDS_TEST: 45
      DOOR_DISCONNECTION_THRESHOLD_SECONDS_TEST: 45
      DISCONNECTION_REMINDER_THRESHOLD_SECONDS_TEST: 45

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: ./.nvmrc

      - name: Install npm dependencies
        working-directory: ./server
        run: npm ci

      - name: Check environment variables
        run: |
          echo "PG_USER=$PG_USER_TEST"
          echo "PG_DATABASE=$PG_DATABASE_TEST"
          echo "PG_PASSWORD=$PG_PASSWORD_TEST"
          echo "PG_PORT=$PG_PORT_TEST"
          echo "PG_HOST=$PG_HOST_TEST"

      - name: Set up PSQL
        run: |
          echo "deb http://apt.postgresql.org/pub/repos/apt/ $(lsb_release -cs)-pgdg main" | sudo tee /etc/apt/sources.list.d/pgdg.list
          wget -qO - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo gpg --dearmor -o /usr/share/keyrings/postgresql-archive-keyring.gpg
          echo "deb [signed-by=/usr/share/keyrings/postgresql-archive-keyring.gpg] http://apt.postgresql.org/pub/repos/apt/ $(lsb_release -cs)-pgdg main" | sudo tee /etc/apt/sources.list.d/pgdg.list
          sudo apt-get update
          sudo apt-get install -y postgresql-16 postgresql-client-16

      - name: Wait for PostgreSQL to be ready
        run: |
          sudo service postgresql restart
          until pg_isready -h $PG_HOST_TEST -p $PG_PORT_TEST -U $PG_USER_TEST -d $PG_DATABASE_TEST; do
            echo "Waiting for PostgreSQL to be ready..."
            sleep 1
          done

      - name: Setup PostgreSQL
        working-directory: ./server
        run: ./setup_postgresql_local.sh

      - name: Run Security Audit
        working-directory: ./server
        run: npx audit-ci --config ./audit-ci.json
      
      - name: Run Linter
        working-directory: ./server
        run: npm run lint

      - name: Run Tests
        working-directory: ./server
        run: npm run test

  firmware_lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Print message for future implementation
        run: echo 'Please implement this in the future using GitHub Actions.'

  firmware_tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Build and test firmware
        run: |
          set -e
          cd firmware/boron-ins-fsm/test
          g++ -std=c++11 -I../inc -I./ -I./mocks -o ConsoleTests consoleFunctionTests.cpp -lstdc++ -lm && ./ConsoleTests -s
          g++ -std=c++11 -I../inc -I./ -I./mocks -I../lib/CircularBuffer/src -o ins3331Tests ins3331Tests.cpp -lstdc++ -lm && ./ins3331Tests -s
          g++ -std=c++11 -I../inc -I./ -I./mocks -o DoorSensorTests imDoorSensorTests.cpp -lstdc++ -lm && ./DoorSensorTests -s
